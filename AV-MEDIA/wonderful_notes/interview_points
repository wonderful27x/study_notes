基础知识
视频:
	yuv
	h264
		nalu
音频:
	pcm
	aac
		adts

封装格式
flv:
	flv header
	tag header
	tag data
mp4:
	trak/chunk/sample
	Media data box
	Move box
		stsd: 音视频解码信息
		stts: sample时长
		stss: 关键帧
		stsc: chunk包含多少个sample
		stsz: sample size
		stco: chunk在文件中位置

流媒体协议
rtmp:
	tcp
	rtmp流程
	flv tag data
	*message、chunk
hls:
	http
	m3u8
	ts
rtsp:
	rtsp
	rtp:
		协议
		h264组包
		aac组包
	rtcp:
		SR: 发送端报告
		RR: 接收端报告
	sdp: m/a

FFMPEG
内存模型:
	AVBuffer
	AVBufferRef
	AVPacket/AVFrame
	代表性api:
		av_packet_alloc
		av_new_packet
		av_read_frame
数据结构:
	AVFormatContext
		AVInputFormat
		AVOutputFormat
		AVStream
			AVCodecParameters
基本解码流程:
	...
ffplay:
	基本框架(流程)
	packet队列
	frame队列
	clock时钟
	音视频同步: clock/serial
	暂停/逐帧播放
	avformat_open_input/hls播放解析
ffmpeg:
	...

SRS
协程:
	线程由内核调度，协程由程序控制
整体框架:
	listen监听
		SrsTcpListener::listen -> 监听
		SrsServer::accept_client -> 创建SrsRtmpConn
	rtmp连接
		rtmp协议: handshake、connect、createStream
		创建SrsLiveSource
	publish推流
		rtmp
			读取rtmp message -> 插入SrsLiveConsumer队列
		rtmp -> rtc
			创建SrsRtcSource
			用Bridger桥将其和SrsLiveSource关联起来
			读取rtmp message -> 打包rtp -> 插入SrsRtcConsumer(与SrsRtcSource关联)队列
		rtc -> rtmp/rtc
			client（http) -> offer sdp/publish stream_url
			server (http) -> answer sdp (udp地址和监听端口,candidate?)
			创建SrsRtcSource 
			创建SrsRtcConnection（模拟的RtcPeerConnection）
			创建SrsRtcPublishStream
			创建初始化DTLS
			创建SrsLiveSource
			创建Bridger桥将SrsRtcSource和SrsLiveSource关联起来
			client 连接udp:ip-port（RtcPeerConnection内部完成）
			server udp回调
				stun打洞,连通性测试
				udp建立dtls,交换srtp密钥
				SrsRtcPublishStream::on_rtp()
					将rtp包插入SrsRtcConsumer(与SrsRtcSource关联)队列
					通过Bridger桥 -> 转rtmp -> 插入SrsLiveConsumer(与SrsLiveSource关联)队列
	play拉流
		rtmp
			创建SrsLiveConsumer(与SrsLiveSource关联)
			从队列取出数据发送给客户端
		rtc
			client (http) -> offer sdp/play stream_url
			server (http) -> answer sdp (udp地址和监听端口,candidate?)
			创建SrsRtcConnection（模拟的RtcPeerConnection）
			创建SrsRtcPlayStream
			创建初始化DTLS
			client 连接udp:ip-port（RtcPeerConnection内部完成）
			server udp回调
				stun打洞,连通性测试
				udp建立dtls,交换srtp密钥
				SrsRtcPlayStream::cycle()
					创建SrsRtcConsumer(与SrsRtcSource关联)
					从SrsRtcConsumer队列获取数据发送到客户端

WEBRTC
基础协议:
	NAT
	STUN
	TURN
	ICE
	DTLS（udp加密协议）
		协商管理SRTP密钥
		为DataChannel提供加密通道
*ICE交互流程
	收集canditates（向stun服务器发送stun包）
	删除重复的candiate
	交换candidates
		方式一: offer/answer时携带candidate
		方式二: 使用单独信令通道交换
	生成candidate pairs
	连通性检查（stun binding request/response）
	生成validlist（将连通ok的candidate pair按优先级排序加入validlist）
	提名candidate pair
	选择最终传输地址
*拥塞控制
	TCP拥塞控制
	WEBRTC拥塞控制
自研webrtc多对多通话(mesh)
	信令交换
SRS webrtc一对一通话(sfu)
	信令交换
	publish发布流（publish stream_url/offer sdp）
	play订阅流（play stream_url/offer sdp）	

OpenGL
*openGl状态机:
	context上下文
	状态设置函数: glClearColor
	状态使用函数: glClear
*第三方库:
	GLFW: 创建上下文、定义窗口参数、处理用户输入
	GLAD: 绑定函数指针
	GLM:  变换矩阵
图形渲染管线:
	顶点着色器
	图元装配
	几何着色器
	光栅化
	片段着色器
	测试与混合
常用对象:
	顶点缓冲对象VBO: 存储从CPU发送到GPU的顶点数据
	索引缓冲对象EBO: 存储顶点绘制顺序
	顶点数组对象VAO: 存储顶点属性的配置,索引缓冲对象的绑定状态
向量与矩阵:
	单位向量
	向量加减得到另一个向量
	向量点乘等于他们的数乘结果乘以夹角余弦
	向量叉乘得到另一个与二者正交的向量
	矩阵乘以一个向量可以变换这个向量
	单位矩阵
	缩放矩阵
	位移矩阵(需要向量的其次坐标)
	旋转矩阵
坐标系统:
	局部空间坐标 * 模型矩阵 ->
	世界空间坐标 * 观察矩阵 ->
	观察空间坐标 * 投影矩阵 ->
	裁剪空间坐标 -> 透视除法 -> glViewport ->
	屏幕空间坐标
	LookAt观察矩阵
		构建元素
			摄像机位置
			摄像机方向
			右轴
			上轴
		原理:用3互相垂直的轴定义一个坐标空间，外加一个平移向量构建一个矩阵，此矩阵乘以任何向量将变换到此坐标空间
	
