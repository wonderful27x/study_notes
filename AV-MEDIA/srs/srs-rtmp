
                              SRS RTMP 推拉流流程框架

======================= （一）listen and accept =================================
#关键类
srs_main_server.cpp -> int main()
SrsHybridServer
SrsServerAdapter
SrsServer
SrsBufferListener
SrsTcpListener
#简化函数调用流程图
int main() -> do_main() --> run_directly_or_daemon() ---> run_hybrid_server()
	-> SrsHybridServer::run()
		-> SrsServerAdapter::run()
			-> SrsServer::listen() -> listen_rtmp()
				-> SrsBufferListener::listen()
					->SrsTcpListener::listen() -> cycle() --> while srs_accept()
				<- SrsBufferListener::on_tcp_client()
			<- SrsServer::accept_client() <- new SrsRtmpConn()
						
					
#srs_main_server.cpp
1.1 启动main函数
int main() -> do_main() --> run_directly_or_daemon() ---> run_hybrid_server()
	1.2 注册服务
	(SrsHybridServer)_srs_hybrid->register_server(new SrsServerAdapter())
	1.3 初始化SrsHybridServer
	(SrsHybridServer)_srs_hybrid->initialize()
	1.4 运行
	(SrsHybridServer)_srs_hybrid->run()
	(SrsHybridServer)_srs_hybrid->stop()
	
#srs_app_hybrid.cpp
SrsHybridServer::register_server(ISrsHybridServer *svr)
	(vector<ISrsHybridServer*>) servers.push_pack(svr)
SrsHybridServer::run() -> for
	servers[i]->run()
#构造函数 SrsServerAdapter(){srs = new SrsServer()}
1.4 运行
SrsServerAdapter::run()
	1.5 初始化SrsServer并开始监听
	(SrsServer*)srs->initialize()
	(SrsServer*)srs->listen()

#srs_app_server.cpp
#构造函数 SrsServer(){conn_manager = new SrsResourceManager("TCP")
1.5 监听rtmp端口
SrsServer::listen()
	listen_rtmp() -> for(ip_ports)
		1.6 实际通过SrsBufferListener来监听
		SrsListener listener = new SrsBufferListener(this)
		(vector<SrsListener*>)listeners.push_pack(listener)
		listener->listen(ip,port)
	...
	conn_manager->start()
2.0 创建Rtmp连接，并启动协程进入cycle
SrsServer::accept_client(srs_netfd_t stfd)
	ISrsStartableConnection* conn = NULL;
	fd_to_resource(stfd,&conn)
		conn = new SrsRtmpConn(this,stfd,ip,port)
	conn_manager->add(conn)
	conn->start()
	
SrsBufferListener::listen(string i,int p)
	listener = new SrsTcpListener(this,ip,port)
	listener->listen()
1.9 继续向上一层SrsServer回调
SrsBufferListener::on_tcp_client(srs_netfd_t stfd)
	server->accept_client(sdfd)

#srs_app_listener.cpp
#构造函数 SrsTcpListener(SrsBufferListener->this){handler = this}
1.7 最终又通过SrsTcpListener来监听
SrsTcpListener::listen()
	srs_tcp_listen(ip,port,&lfd)
	trd = new SrsSTCoroutine("tcp",this)
	trd->start()
1.8 accept 并向上一层SrsBufferListener回调
SrsTcpListener::cycle() -> while
	fd = srs_accept(lfd)
	handler->on_tcp_client(fd)

=============================（二）handshake、connect、set window/chunk size、createStream ====================================
#关键类
SrsRtmpConn
SrsRtmpServer
SrsLiveSourceManager
SrsLiveSource
#简化函数调用流程图
SrsRtmpConn::cycle() -> do_cycle()
	-> SrsRtmpServer::handshake() --> connect_app() 
	-> service_cycle()
		-> SrsRtmpServer::set_window_ack_size() -> set_peer_bandwidth() --> set_chunk_size() ---> response_connect_app
		-> stream_server_cycle()
			-> SrsRtmpServer::identify_client()
			-> SrsLiveSourceManager::fetch_or_create(**SrsLiveSource source)
			-> SrsLiveSource::set_cache()
			switch(info->type)
				case SrsRtmpConnPlay:
					#StreamBegin
					#onStatus(NetStream.Play.Reset)
					#onStatus(NetStream.Play.Start)
					#|RtmpSampleAccess(false,false)
					#onStatus(NetStream.Data.Start)
					SrsRtmpServer::start_play()
					playing(source)
				case SrsRtmpConnFMLEPublish
					#FCPublish
					#FCPublish response
					#createStream
					#createStream response
					#publish
					#publish response onFCPublish(NetStream.Publish.Start)
					#publish response onStatus(NetStream.Publish.Start)
					SrsRtmpServer::start_fmle_publish()
					publishing(source)

#srs_app_rtmp_conn.cpp
#构造函数 SrsRtmpConn(SrsServer->this,stfd,ip,port)
	server = this
	stfd = stfd
	ip = ip
	port = port
	skt = new SrsTcpConnection(stfd)
	rtmp = new SrsRtmpServer(skt)
SrsRtmpConn::start()
	skt->initialize()
	trd->start()
1.1进入cycle
SrsRtmpConn::cycle()
	do_cycle()
		1.2 开始rtmp握手handshake
		rtmp->handshake()
		1.3 连接connect
		rtmp->connect_app()
		service_cycle()
			1.4 设置窗口大小、chunk size和带宽
			rtmp->set_window_ack_size()
			rtmp->set_peer_bandwidth()
			rtmp->set_chunk_size()
			#响应connect ok
			rtmp->response_connect_app()
			stream_server_cycle()
				1.5 判断是推流还是拉流
				rtmp->identify_client(info->type)
				1.6 创建source
				SrsLiveSource *source = NULL
				_srs_sources->fetch_or_create(server,&source)
				#时延相关gop,是否开启gop缓存
				source->set_cache(_srs_config->get_gop_cache())
				switch(info->type)
					1.7 拉流处理逻辑 createStream?、play、streamBegin
					case SrsRtmpConnPlay:
						#StreamBegin
						#onStatus(NetStream.Play.Reset)
						#onStatus(NetStream.Play.Start)
						#|RtmpSampleAccess(false,false)
						#onStatus(NetStream.Data.Start)
						rtmp->start_play(info->res->stream_id)
						playing(source)
					1.8 推流处理逻辑 createStream、publish、onFCPublish
					case SrsRtmpConnFMLEPublish
						#FCPublish
						#FCPublish response
						#createStream
						#createStream response
						#publish
						#publish response onFCPublish(NetStream.Publish.Start)
						#publish response onStatus(NetStream.Publish.Start)
						rtmp->start_fmle_publish(info->res->stream_id)
						publishing(source)
					
		

==================================（三）publish video/audio data =================================
#关键类
SrsRtmpConn
SrsPublishRecvThread
SrsRecvThread
SrsRtmpServer
SrsProtocol
SrsLiveSource
SrsLiveConsumer
SrsMessageQueue
SrsCommonMessage
SrsSharedPtrMessage
SrsGopCache
#简化函数调用流程图
SrsRtmpConn::publish() -> do_publish()
	-> SrsPublishRecvThread::start()
		-> SrsRecvThread::start() -> cycle() --> do_cycle() while
			-> SrsRtmpServer::recv_message()
				-> SrsProtocol::recv_message() 
					-> recv_interlaced_message() 
						--> read_basic_header()
						--> read_message_hader()
						--> read_message_payload()
					-> on_recv_message()
	<- SrsPublishRecvThread::consume()
<- SrsRtmpConn::handle_publish_message()
SrsRtmpConn::handle_publish_message() -> handle_process_publish_message()
	-> SrsLiveSource::on_audio()
	-> SrsLiveSource::on_video() -> on_video_imp() for
		-> SrsLiveConsumer::enqueue()
			-> SrsMessageQueue::enqueue()
		

1.1 创建SrsPublishRecvThread循环从推流端读取rtmp message	
SrsRtmpConn::publishing(SrsLiveSource *source)
	1.2 创建SrsPublishRecvThread读取数据
	SrsPublishRecvThread rtrd(rtmp,this,source...)	
	do_publishing(source &rtrd)
		rtrd->start()
			1.3 交给SrsRecvThread来读取数据
			(SrsRecvThread)trd.start()	
	
#srs_app_recev_thread.cpp
构造函数 SrsPublishRecvThread(SrsRtmpServer *rtmp,SrsRtmpConn *conn,SrsLiveSource *source)
	(SrsRcevThread*) trd(this,rtmp)
	rtmp = rtmp
	_conn = conn
	_source = source
	#时延相关merge读
	mr = _srs_config->get_mr_enabled(req->vhost);
    	mr_sleep = _srs_config->get_mr_sleep(req->vhost);
1.7 继续回调给上层SrsRtmpConn
SrsPublishRecvThread::consume(SrsCommonMessage *msg)
	_conn->handle_publish_message(_source,msg)
	
构造函数 SrsRecvThread(SrsPublishRecvThread->this,SrsRtmpServer *r)
	rtmp = r
	pumper = this
1.3 循环中去读取数据
SrsRecvThread::cycle()
	#时延相关merge读
	pumper->on_start()
		if (mr)
        		set_socket_buffer(mr_sleep);
        		rtmp->set_merge_read(true, this);
	do_cycle() -> while
		//1.4 真正的工作者是SrsRtmpServer
		rtmp->recv_message(**SrsCommonMessage pmsg)
			(SrsProtocol*)protocol->recv_message(pmsg) -> while
				SrsCommonMessage *msg = NULL
				recv_interlaced_message(&msg)
					read_basic_header()
						#时延相关merge读
						(SrsFastStream*)in_buffer->(skt)
							(SrsPublishRecvThread*)_handler->on_read()
								if (nread < SRS_MR_SMALL_BYTES) srs_usleep(mr_sleep)
					read_message_header()
					read_message_payload()
				on_recv_message(msg)
					decode_message(msg)
					switch
					 	case RTMP_MSG_WindowAcknowledgementSize
					 	case RTMP_MSG_SetChunkSize
					 	case RTMP_MSG_UserControlMessage
				*pmsg = msg
		1.6 将message回调给上层SrsPublishRecvThread
		pumper->consume(msg)
	pumper->on_stop()

1.8 分发音视频消息	
SrsRtmpConn::handle_publish_message(SrsLiveSource *source,SrsCommonMessage *msg)
	rtmp->decode_message(msg)
	process_publish_message(source,msg)
		1.9 实际由SrsLiveSource完成
		if source->on_video(msg)
		if source->on_audio(msg)
		

1.9 推流数据copy给每个consumer队列
SrsLiveSource::on_audio(SrsCommonMessage* audio)...
SrsLiveSource::on_video(SrsCommonMessage* video)
	SrsSharedPtrMessage msg.create(video)
	on_video_imp(msg) -> for
		#SrsLiveSource拥有所有的consumer,而consumer拥有真正的消息队列
		#注意如果还没有拉流端接入，这是的consumers大小是0，因此不会进入这个for循环
		SrsLiveConsumer *consumer = consumers.at(i)
		consumer->enqueue(msg)
			(SrsMessageQueue*)queue->enqueue
		#时延相关gop,缓存最后一个gop的包
		(SrsGopCache*)gop_cache->cache(msg)


================================（四）play video/audio data =====================================
#关键类
SrsRtmpConn
SrsLiveSource
SrsLiveConsumer
SrsQueueRecvThread
SrsRecvThread
SrsRtmpServer
SrsProtocol
SrsCommonMessage
#简化函数调用流程图
SrsRtmpConn::playing()
	-> SrsLiveSource::create_consumer(*&SrsLiveConsumer consumer)
	-> SrsLiveConsumer::consumer_dumps()
	-> SrsQueueRecvThread::start()
		-> SrsRecvThread::start() -> cycle() --> do_cycle() while
			-> SrsRtmpServer::recv_message()
				-> SrsProtocol::recv_message()
					-> recv_interlaced_message()
						--> read_basic_header()
						--> read_message_hader()
						--> read_message_payload()
					-> on_recv_message()
	<- SrsQueueRecvThread::consume() <- (vector<SrsCommonMessage*>) queue.push_back()
	-> do_playing() while --> process_play_control_msg(SrsQueueRecvThread::pump())
		-> SrsLiveConsumer::dump_packets()
		-> SrsRtmpServer::send_and_free_messages()
	
				

1.1 创建consumer并循环从consumer队列读取数据发送给拉流端			
SrsRtmpConn::playing(SrsLiveSource *source)
	1.2 创建consumer
	source->create_consumer(**SrsLiveConsumer consumer)
	source->consumer_dumps(consumer)
		#时延相关queue
		consumer->set_queue_size(_srs_config->get_queue_length())
		#时延相关gop,拷贝gop缓存给client
		gop_cache->(consumer)
	1.3 创建SrsQueueRecvThread来读取message
	#注意：这里主要是读取控制消息，真正的音视频数据在consumer->enqueue里面
	SrsQueueRecvThread trd(consumer)
	trd.start()
		1.4 交给SrsRecvThread来处理
		trd.start()
	1.8 从consumer里读取音视频数据发送给客户端
	do_playing(source,consumer,&rtrd)
		#时延相关merge写
		mw_msgs = _srs_config->get_mw_msgs(req->vhost, realtime);
		mw_sleep = _srs_config->get_mw_sleep(req->vhost);
		skt->set_socket_buffer(mw_sleep);
		-> while
			#注意这里的msg正是1.7中SrsQueueRecvThread存入队列的消息
			SrsCommonMessage *msg = rtrd->pump()
			process_play_control_msg(consumer,msg)
			#时延相关merge写
			consumer->wait(mw_msgs,mw_sleep)
			consumer->dump_packets(&msgs,count)
				#注意这里的consumer队列的数据就是在publish是向consumer填充的数据
				queue->dump_packets(max,msgs->msgs,count)
			rtmp->send_and_free_message(msgs.msgs,count,info->res->stream_id)

srs_app_recv_thread.cpp
#构造函数 SrsQueueRecvThread(SrsLiveConsumer *consumer,SrsRtmpServer *rtmp)
	(SrsRevThread *)trd(this,rtmp)
	_consumer = consumer
	rtmp = rtmp
1.7 将控制消息存入队列
SrsQueueRecvThread::consume(SrsCommonMessage* msg)
	(vector<SrsCommonMessage*>) queue.push_back(msg)
	
#同上只是传递的参数为SrsQueueRecvThread
#构造函数 SrsRecvThread(SrsQueueRecvThread->this,SrsRtmpServer *r)
	rtmp = r
	pumper = this
1.4 循环读取数据
SrsRecvThread::cycle()
	pumper->on_start()
	do_cycle() -> while
		1.5 真正的工作者是SrsRtmpServer
		rtmp->recv_message(**SrsCommonMessage pmsg)
			(SrsProtocol*)protocol->recv_message(pmsg) -> while
				SrsCommonMessage *msg = NULL
				recv_interlaced_message(&msg)
					read_basic_header
					read_message_header
					read_message_payload
				on_recv_message(msg)
					decode_message(msg)
					switch
					 	case RTMP_MSG_WindowAcknowledgementSize
					 	case RTMP_MSG_SetChunkSize
					 	case RTMP_MSG_UserControlMessage
				*pmsg = msg
		1.6 将message返回上一层SrsQueueRecvThread
		pumper->consume(msg)
	pumper->on_stop()
	
	
================================== rtmp 时延问题 ==============================
推拉流流程
1. 推流建立连接
2. 启动协程不断读取数据，并存入拉流者队列中
3. 拉流者启动协程不断从队列中读取数据，并发送

时延1：merge读,默认关闭
	publish配置文件
	publish {
		# about MR, read https://github.com/ossrs/srs/issues/241
		# when enabled the mr, SRS will read as large as possible.
		# default: off
		mr          off;
		# the latency in ms for MR(merged-read),
		# the performance+ when latency+, and memory+,
		#       memory(buffer) = latency * kbps / 8
		# for example, latency=500ms, kbps=3000kbps, each publish connection will consume
		#       memory = 500 * 3000 / 8 = 187500B = 183KB
		# when there are 2500 publisher, the total memory of SRS at least:
		#       183KB * 2500 = 446MB
		# the recommended value is [300, 2000]
		# default: 350
		mr_latency  350;
	}
	步骤2中，默认mr_latency 350ms,它和码率一起响应socket buffer大小
时延2：merge写，默认开启
	play {
	        # whether cache the last gop.
		# if on, cache the last gop and dispatch to client,
		#   to enabled fast startup for client, client play immediately.
		# if off, send the latest media data to client,
		#   client need to wait for the next Iframe to decode and show the video.
		# set to off if requires min delay;
		# set to on if requires client fast startup.
		# default: on
		gop_cache       off;
		# the max live queue length in seconds.
		# if the messages in the queue exceed the max length,
		# drop the old whole gop.
		# default: 30
		queue_length    10;
        
		# set the MW(merged-write) latency in ms.
		# SRS always set mw on, so we just set the latency value.
		# the latency of stream >= mw_latency + mr_latency
		# the value recomment is [300, 1800]
		# @remark For WebRTC, we enable pass-timestamp mode, so we ignore this config.
		# default: 350 (For RTMP/HTTP-FLV)
		# default: 0 (For WebRTC)
		mw_latency      350;

		# Set the MW(merged-write) min messages.
		# default: 0 (For Real-Time, min_latency on)
		# default: 1 (For WebRTC, min_latency off)
		# default: 8 (For RTMP/HTTP-FLV, min_latency off).
		mw_msgs         8;
	}
	步骤3中，当消息持续时长mw_latency和消息数mw_msgs都达到设置的要求时才写一次，如mw_latency=350ms并且mw_msgs=8
时延3：queue_length
即拉流者的队列保存的最大时长second
时延4：gop cache
即是否开启gop缓存



================================ 调用栈信息 ====================================
(gdb) bt
#0  SrsConfig::get_listens[abi:cxx11]() (this=0x555555e82340)
    at src/app/srs_app_config.cpp:3010
#1  0x00005555556d6930 in SrsServer::listen_rtmp (this=0x555555eaf350)
    at src/app/srs_app_server.cpp:1159
#2  0x00005555556d36a3 in SrsServer::listen (this=0x555555eaf350)
    at src/app/srs_app_server.cpp:751
#3  0x00005555557d45e1 in SrsServerAdapter::run (this=0x555555eaf0a0)
    at src/app/srs_app_hybrid.cpp:160
#4  0x00005555557d5114 in SrsHybridServer::run (this=0x555555e97b10)
    at src/app/srs_app_hybrid.cpp:271
#5  0x000055555583f6db in run_hybrid_server ()
    at src/main/srs_main_server.cpp:468
#6  0x000055555583f1bc in run_directly_or_daemon ()
    at src/main/srs_main_server.cpp:398
#7  0x000055555583dab0 in do_main (argc=3, argv=0x7fffffffdf08)
    at src/main/srs_main_server.cpp:197
#8  0x000055555583dca3 in main (argc=3, argv=0x7fffffffdf08)
    at src/main/srs_main_server.cpp:206
    
 (gdb) bt
#0  SrsRtmpConn::start (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:1443
#1  0x00005555556d8077 in SrsServer::accept_client (this=0x555555eaf440, 
    type=SrsListenerRtmpStream, stfd=0x555555ff9bb0)
    at src/app/srs_app_server.cpp:1368
#2  0x00005555556cf4ee in SrsBufferListener::on_tcp_client (
    this=0x555555ef9a80, stfd=0x555555ff9bb0) at src/app/srs_app_server.cpp:110
#3  0x00005555557b08ae in SrsTcpListener::cycle (this=0x555555efe180)
    at src/app/srs_app_listener.cpp:271
#4  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555555efe250)
    at src/app/srs_app_st.cpp:253
#5  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555555efe250)
    at src/app/srs_app_st.cpp:268
#6  0x00005555558403a3 in _st_thread_main () at sched.c:363
#7  0x0000555555840c56 in st_thread_create (start=0xffffffffffffff98, 
    arg=0x12000, joinable=32767, stk_size=-138429536) at sched.c:694
#8  0x0000000000000000 in ?? ()



(gdb) bt
#0  SrsRtmpConn::do_publishing (this=0x555555ff9be0, source=0x555556016d60, 
    rtrd=0x555556014080) at src/app/srs_app_rtmp_conn.cpp:858
#1  0x00005555556ec7ce in SrsRtmpConn::publishing (this=0x555555ff9be0, 
    source=0x555556016d60) at src/app/srs_app_rtmp_conn.cpp:839
#2  0x00005555556e999a in SrsRtmpConn::stream_service_cycle (
    this=0x555555ff9be0) at src/app/srs_app_rtmp_conn.cpp:542
#3  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:403
#4  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:216
#5  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:1458
#6  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555555ff9d70)
    at src/app/srs_app_st.cpp:253
#7  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555555ff9d70)
    at src/app/srs_app_st.cpp:268
#8  0x00005555558403a3 in _st_thread_main () at sched.c:363
#9  0x0000555555840c56 in st_thread_create (
    start=0x55555572107c <SrsFastCoroutine::pfn(void*)>, arg=0x555555ff9d70, 
    joinable=1, stk_size=65536) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)


(gdb) bt
#0  SrsRtmpServer::identify_client (this=0x555555fe9560, stream_id=1, 
    type=@0x555556003678: SrsRtmpConnUnknown, stream_name="", 
    duration=@0x5555560037f8: -1) at src/protocol/srs_rtmp_stack.cpp:2487
#1  0x00005555556e8b4b in SrsRtmpConn::stream_service_cycle (
    this=0x555555ff9be0) at src/app/srs_app_rtmp_conn.cpp:454
#2  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:403
#3  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:216
#4  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:1458
#5  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555555ff9d70)
    at src/app/srs_app_st.cpp:253
#6  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555555ff9d70)
    at src/app/srs_app_st.cpp:268
#7  0x00005555558403a3 in _st_thread_main () at sched.c:363
#8  0x0000555555840c56 in st_thread_create (
    start=0x55555572107c <SrsFastCoroutine::pfn(void*)>, arg=0x555555ff9d70, 
    joinable=1, stk_size=65536) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)


(gdb) bt
#0  SrsProtocol::recv_interlaced_message (this=0x555555ff9df0, 
    pmsg=0x555556014050) at src/protocol/srs_rtmp_stack.cpp:852
#1  0x0000555555666519 in SrsProtocol::recv_message (this=0x555555ff9df0, 
    pmsg=0x555556014100) at src/protocol/srs_rtmp_stack.cpp:370
#2  0x0000555555671fe1 in SrsRtmpServer::identify_client (this=0x555555fe9560, 
    stream_id=1, type=@0x555556003678: SrsRtmpConnUnknown, stream_name="", 
    duration=@0x5555560037f8: -1) at src/protocol/srs_rtmp_stack.cpp:2493
#3  0x00005555556e8b4b in SrsRtmpConn::stream_service_cycle (
    this=0x555555ff9be0) at src/app/srs_app_rtmp_conn.cpp:454
#4  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:403
#5  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:216
#6  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:1458
#7  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555555ff9d70)
    at src/app/srs_app_st.cpp:253
#8  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555555ff9d70)
    at src/app/srs_app_st.cpp:268
#9  0x00005555558403a3 in _st_thread_main () at sched.c:363
#10 0x0000555555840c56 in st_thread_create (
    start=0x55555572107c <SrsFastCoroutine::pfn(void*)>, arg=0x555555ff9d70, 
    joinable=1, stk_size=65536) at sched.c:694
    
    (gdb) bt
#0  SrsProtocol::on_recv_message (this=0x555555ff9df0, msg=0x5555560177c0)
    at src/protocol/srs_rtmp_stack.cpp:1292
#1  0x00005555556666a7 in SrsProtocol::recv_message (this=0x555555ff9df0, 
    pmsg=0x555556014100) at src/protocol/srs_rtmp_stack.cpp:387
#2  0x0000555555671fe1 in SrsRtmpServer::identify_client (this=0x555555fe9560, 
    stream_id=1, type=@0x555556003678: SrsRtmpConnUnknown, stream_name="", 
    duration=@0x5555560037f8: -1) at src/protocol/srs_rtmp_stack.cpp:2493
#3  0x00005555556e8b4b in SrsRtmpConn::stream_service_cycle (
    this=0x555555ff9be0) at src/app/srs_app_rtmp_conn.cpp:454
#4  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:403
#5  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:216
#6  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555555ff9be0)
    at src/app/srs_app_rtmp_conn.cpp:1458
#7  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555555ff9d70)
    at src/app/srs_app_st.cpp:253
#8  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555555ff9d70)
    at src/app/srs_app_st.cpp:268
#9  0x00005555558403a3 in _st_thread_main () at sched.c:363
#10 0x0000555555840c56 in st_thread_create (
    start=0x55555572107c <SrsFastCoroutine::pfn(void*)>, arg=0x555555ff9d70, 
    joinable=1, stk_size=65536) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)


(gdb) bt
#0  SrsRtmpConn::handle_publish_message (this=0x555555ff9be0, 
    source=0x555556018560, msg=0x5555560516e0)
    at src/app/srs_app_rtmp_conn.cpp:1004
#1  0x000055555579efc9 in SrsPublishRecvThread::consume (this=0x555556014080, 
    msg=0x5555560516e0) at src/app/srs_app_recv_thread.cpp:373
#2  0x000055555579def3 in SrsRecvThread::do_cycle (this=0x5555560140a0)
    at src/app/srs_app_recv_thread.cpp:131
#3  0x000055555579dd40 in SrsRecvThread::cycle (this=0x5555560140a0)
    at src/app/srs_app_recv_thread.cpp:100
#4  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555556051460)
    at src/app/srs_app_st.cpp:253
#5  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555556051460)
    at src/app/srs_app_st.cpp:268
#6  0x00005555558403a3 in _st_thread_main () at sched.c:363
#7  0x0000555555840c56 in st_thread_create (start=0x555556051220, 
    arg=0x555556013da0, joinable=21845, stk_size=1442921879) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)

(gdb) bt
#0  SrsRtmpConn::process_publish_message (this=0x555555ff9be0, 
    source=0x555556018560, msg=0x5555560516e0)
    at src/app/srs_app_rtmp_conn.cpp:1045
#1  0x00005555556ede4b in SrsRtmpConn::handle_publish_message (
    this=0x555555ff9be0, source=0x555556018560, msg=0x5555560516e0)
    at src/app/srs_app_rtmp_conn.cpp:1037
#2  0x000055555579efc9 in SrsPublishRecvThread::consume (this=0x555556014080, 
    msg=0x5555560516e0) at src/app/srs_app_recv_thread.cpp:373
#3  0x000055555579def3 in SrsRecvThread::do_cycle (this=0x5555560140a0)
    at src/app/srs_app_recv_thread.cpp:131
#4  0x000055555579dd40 in SrsRecvThread::cycle (this=0x5555560140a0)
    at src/app/srs_app_recv_thread.cpp:100
#5  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555556051460)
    at src/app/srs_app_st.cpp:253
#6  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555556051460)
    at src/app/srs_app_st.cpp:268
#7  0x00005555558403a3 in _st_thread_main () at sched.c:363
#8  0x0000555555840c56 in st_thread_create (start=0x555556051220, 
    arg=0x555556013da0, joinable=21845, stk_size=1442921879) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)


(gdb) bt
#0  SrsLiveSource::create_consumer (this=0x555556017520, 
    consumer=@0x5555560b5358: 0x0) at src/app/srs_app_source.cpp:2571
#1  0x00005555556eae7b in SrsRtmpConn::playing (this=0x555556017410, 
    source=0x555556017520) at src/app/srs_app_rtmp_conn.cpp:658
#2  0x00005555556e98b7 in SrsRtmpConn::stream_service_cycle (
    this=0x555556017410) at src/app/srs_app_rtmp_conn.cpp:532
#3  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555556017410)
    at src/app/srs_app_rtmp_conn.cpp:403
#4  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555556017410)
    at src/app/srs_app_rtmp_conn.cpp:216
#5  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555556017410)
    at src/app/srs_app_rtmp_conn.cpp:1458
#6  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x555556072970)
    at src/app/srs_app_st.cpp:253
#7  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x555556072970)
    at src/app/srs_app_st.cpp:268
#8  0x00005555558403a3 in _st_thread_main () at sched.c:363
#9  0x0000555555840c56 in st_thread_create (
    start=0x55555572107c <SrsFastCoroutine::pfn(void*)>, arg=0x555556072970, 
    joinable=1, stk_size=65536) at sched.c:694
Backtrace stopped: previous frame inner to this frame (corrupt stack?)

(gdb) bt
#0  SrsLiveConsumer::enqueue (this=0x5555560512d0, shared_msg=0x555556050fe0, 
    atc=false, ag=SrsRtmpJitterAlgorithmFULL) at src/app/srs_app_source.cpp:451
#1  0x00005555556f868a in SrsMetaCache::dumps (this=0x555556018720, 
    consumer=0x5555560512d0, atc=false, ag=SrsRtmpJitterAlgorithmFULL, 
    dm=true, ds=true) at src/app/srs_app_source.cpp:1567
#2  0x00005555556fe502 in SrsLiveSource::consumer_dumps (this=0x555556018850, 
    consumer=0x5555560512d0, ds=true, dm=true, dg=true)
    at src/app/srs_app_source.cpp:2611
#3  0x00005555556eaefe in SrsRtmpConn::playing (this=0x555556017560, 
    source=0x555556018850) at src/app/srs_app_rtmp_conn.cpp:661
#4  0x00005555556e98b7 in SrsRtmpConn::stream_service_cycle (
    this=0x555556017560) at src/app/srs_app_rtmp_conn.cpp:532
#5  0x00005555556e8765 in SrsRtmpConn::service_cycle (this=0x555556017560)
    at src/app/srs_app_rtmp_conn.cpp:403
#6  0x00005555556e71b4 in SrsRtmpConn::do_cycle (this=0x555556017560)
    at src/app/srs_app_rtmp_conn.cpp:216
#7  0x00005555556f05d2 in SrsRtmpConn::cycle (this=0x555556017560)
    at src/app/srs_app_rtmp_conn.cpp:1458
#8  0x0000555555720ffe in SrsFastCoroutine::cycle (this=0x5555560519b0)
    at src/app/srs_app_st.cpp:253
#9  0x00005555557210a0 in SrsFastCoroutine::pfn (arg=0x5555560519b0)
    at src/app/srs_app_st.cpp:268
#10 0x00005555558403a3 in _st_thread_main () at sched.c:363



=============================== old-analize back ==================================================
SrsRtmpConn::do_cycle //handshake,connect_app,
SrsRtmpConn::service_cycle //set_window_ack_size,set_peer_bandwidth,set_chunk_size
SrsRtmpConn::stream_service_cycle //identify_client(),fetch_or_create(**source),publishing()
SrsProtocol::read_basic_header   //rtmp basic header,like fmt csid///
SrsRtmpServer::start_fmle_publish //FCPublish,FCPublish response,createStream,publish...///
SrsRtmpConn::publishing //SrsPublishRecvThread rtrd,do_publishing(source,&rtrd)
SrsPublishRecvThread构造函数创建了SrsRecvThread(this){pumper = this}
SrsRecvThread::do_cycle //rtmp->recv_message,pumper->consume
SrsPublishRecvThread::consume  -> SrsRtmpConn::handle_publish_message -> SrsRtmpConn::process_publish_message 
source->on_audio
#srs_rtmp_stack.cpp
#构造函数
SrsRtmpServer(SrsTcpConnection->this)
	protocol = new SrsProtocol(this)
SrsRtmpServer::start_fmle_publish(int stream_id)
	#FCPublish
	expect_message<SrsFMLEStartPacket>(&msg, &pkt))
		protocol->expect_message(msg,pkt)
	#FCPublish response
	protocol->send_and_free_packet(pkt, 0))
	#createStream
	expect_message<SrsCreateStreamPacket>(&msg, &pkt)
		protocol->expect_message(msg,pkt)
	#createStream response
	protocol->send_and_free_packet(pkt, 0))
	#publish
	expect_message<SrsPublishPacket>(&msg, &pkt))
		protocol->expect_message(msg,pkt)
	#publish response onFCPublish(NetStream.Publish.Start)
	protocol->send_and_free_packet(pkt, stream_id))
	#publish response onStatus(NetStream.Publish.Start)
	protocol->send_and_free_packet(pkt, stream_id))
	
	//1 创建SrsPublishRecvThread循环从推流端读取rtmp message	
SrsRtmpConn::publishing(SrsLiveSource *source)
	1 构造SrsPublishRecvThread
	SrsPublishRecvThread rtrd(rtmp,_conn = SrsRtmpConn->this,_source = source...)
		1.1 同时构造SrsRecvThread
		//实际由SrsRecvThread完成读取任务，并且SrsPublishRecvThread的构造函数构造了SrsRecvThread
		SrsRecvThread rtd(rtmp,pumper = SrsPublishRecvThread->this)
			3 循环中读取message
			cycle()
				pumper->on_start()
				do_cycle() -> while
					rtmp->recv_message(SrsCommonMessage**msg)
					3.1 回调给SrsPublishRecvThread
					pumper->consume(msg)
				pumper->on_stop()
	2 调用start进入cycle循环	
	do_publishing -> rtrd->start() --> rtd.start()
	
	//4 创建consumer并循环从consumer队列读取数据发送给拉流端			
SrsRtmpConn::playing(SrsLiveSource *source)
	source->create_consumer(**SrsLiveConsumer consumer)
	source->consumer_dumps(consumer)
	//注意：这里主要是读取控制消息，真正的音视频数据在consumer->enqueue里面
	SrsQueueRecvThread trd(consumer)::start
		SrsRecvThread::start
			(SrsQueueRecvThread*) pumper->on_start
			do_cycle
				(SrsRtmpServer*)rtmp->recv_message(*msg)
					(SrsProtocol*)protocol->recv_message -> while
						recv_interlaced_message
							read_basic_header
							read_message_header
							read_message_payload
						on_recv_message
							decode_message
							switch
							 	case RTMP_MSG_WindowAcknowledgementSize
							 	case RTMP_MSG_SetChunkSize
							 	case RTMP_MSG_UserControlMessage
				pumper->consume(msg)
					(vector<SrsCommonMessage*>) queue.push_back(msg)
	//从consumer里读取音视频数据发送给客户端
	do_playing -> while
		consumer->dump_packets
			queue->dump_packets
		rtmp->send_and_free_message



